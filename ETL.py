# -*- coding: utf-8 -*-
"""Atividade 5 - Projeto Final ETL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sRIKg0PgjFLjMWQQPIfCaiaJB_EugYrV
"""

#Importando o sqlalchemy
from sqlalchemy.ext.declarative import declarative_base
import sqlalchemy 
 #importando o Pandas
import pandas as pd



Base = sqlalchemy.ext.declarative.declarative_base()


#criando o engine, a comunicação com o banco de dados
engine_origem = sqlalchemy.create_engine('sqlite:////content/dw.db', echo=True)

#faz a ligação do que criamos em pythom com o banco de dados
Session = sqlalchemy.orm.sessionmaker(bind=engine_origem)
session = Session()

"""#Pegando dados csv"""
dados = pd.read_csv('olist_orders_dataset.csv')
dadosclientes = pd.read_csv('olist_customers_dataset.csv')
dadosprodutos = pd.read_csv('olist_products_dataset.csv')
dadossellers = pd.read_csv('olist_sellers_dataset.csv')
dadositems = pd.read_csv('olist_order_items_dataset.csv')


#criação das tabelas
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship

class Customer(Base):
    __tablename__ = "cliente"

    cliente_id = Column(String, primary_key=True)
    cliente_city = Column(String)
    cliente_state = Column(String)

    
#tabela "ordem de serviço" faz relação com a tabela "cliente"
#criamos uma chave estrangeira nessa tbm

class Products (Base):
  __tablename__ = "produto"

  produto_id = Column(String, primary_key=True )
  produto_category_name = Column(String)
  produto_photos_qty= Column(String)
  
class Sellers (Base):
  __tablename__ = "vendedor"

  seller_id = Column(String, primary_key=True )
  seller_city = Column(String)
  seller_state= Column(String)


#Na tabela items criamos 2 chaves estrangeiras, uma para a tabela produto outra com com a tabela vendedor

class Pedido (Base):
  __tablename__ = "pedido"

  order_id = Column(String, primary_key=True )
  customer_id = Column(String, ForeignKey('cliente.cliente_id'))
  cliente = relationship('cliente')
  order_status = Column(String)
  order_purchase_timestamp = Column(String, ForeignKey('tempo.date_id'))
  tempo = relationship('tempo')
  order_item_id = Column(String)
  product_id = Column(String, ForeignKey('produtos.product_id'))
  products = relationship('products')
  seller_id = Column(String, ForeignKey('sellers.seller_id'))
  sellers = relationship('sellers')
  shipping_limit_date = Column(String)
  price = Column(String)
  freight_value = Column(String)


class Tempo (Base):
  __tablename__ = "tempo"

  date_id = Column(String, primary_key=True )
  day = Column(Integer)
  month = Column(Integer)
  semester = Column(Integer)
  year = Column(Integer)

  


#inserindo os dados já declarados acima 

dados = dados[["order_id", "customer_id", "order_status","order_purchase_timestamp"]]


# Inserir dados Clientes
dadosclientes = dadosclientes[["customer_id", "customer_city", "customer_state"]]
dadosclientes= dadosclientes.set_index('customer_id')
dadosclientes.to_sql('customer', engine_origem, if_exists='append')

# Inserir dados Produtos
dadosprodutos = dadosprodutos[["product_id", "product_category_name", "product_photos_qty"]]
dadosprodutos= dadosprodutos.set_index('product_id')
dadosprodutos.to_sql('products', engine_origem, if_exists='append')

# Inserir dados Sellers
dadossellers = dadossellers[["seller_id", "seller_city", "seller_state"]]
dadossellers= dadossellers.set_index('seller_id')
dadossellers.to_sql('sellers', engine_origem, if_exists='append')

# Inserir dados Items

#na coluna data limite de envio tiramos a "hora" por julgar não necessario no nosso DW

dadositems['shipping_limit_date'] = pd.to_datetime(dadositems['shipping_limit_date']).dt.date


#configurando a data da tabela

def shipping_limit_date(start='2010-01-01', end='2022-12-31'):
    start_ts = pd.to_datetime(start).date()

    end_ts = pd.to_datetime(end).date()

  
    dates =  pd.DataFrame(index=pd.date_range(start_ts, end_ts))
    dates.index.name = 'date_id'

    days_names = {
        i:name
        for i, name in enumerate(['Domingo', 'Segunda-feria', 'Terça-feira',
                      'Quarta-Feira', 'Quinta-feria', 'Sexta-feira', 
                      'Sabado'])
    }
    
    
    dates['day'] = dates.index.day
    dates['month'] = dates.index.month
    dates['semester'] = dates.index.month.map(lambda mth: 1 if mth <7 else 2)
    dates['year'] = dates.index.year
    dates.reset_index(inplace=True)


    return dates



    #Criando a tabela Fato 
    #Verificar o melhor parametro
    #fato=pd.read_sql(select from ordem_servico join )

    ordem_servico=ordem_servico.rename(columns={'order_approved_at'})
    ordem_servico= pd.merge(orders,payments, how = 'left',on='order_id')
    ordem_servico= pd.merge(fato_orders,order_items, how = 'left', on = 'order_id')

    return ordem_servico,sellers,customers,products,date

# Povoando tabela tempo

dt = shipping_limit_date()
dt['date_id'] = pd.to_datetime(dt['date_id']).dt.date
dt = dt[["date_id", "day", "month", "semester", "year"]]
dt = dt.set_index('date_id')
dt.to_sql('Tempo', engine_origem, if_exists='append')

# Juntar DataFrame

dfJuncao = pd.merge(dados,dadositems, how = 'inner', on= 'order_id')
dfJuncao['order_purchase_timestamp'] = pd.to_datetime(dfJuncao['order_purchase_timestamp']).dt.date
dfJuncao = dfJuncao.set_index('order_id')
dfJuncao.to_sql('pedido', engine_origem, if_exists='append')